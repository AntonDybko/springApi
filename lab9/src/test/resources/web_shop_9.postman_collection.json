{
	"info": {
		"_postman_id": "009d199c-7ccc-4a65-9877-989ecc972e05",
		"name": "web_shop_9",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "14174149"
	},
	"item": [
		{
			"name": "getAllShops",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'All Shops' heading\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>All Shops</h2>\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/shop/"
			},
			"response": []
		},
		{
			"name": "getFindShopPage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains nessesary headers\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>Search Shop by Address and Opening Time</h2>\");\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>Search Shop by Two Addresses</h2>\");\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>Search Shop by Address and Revenue</h2>\");\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>Search Shop by Revenue</h2>\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/shop/findShop"
			},
			"response": []
		},
		{
			"name": "getShopsByAddressAndOpeningTime",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'All Shops' heading\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>All Shops</h2>\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/shop/findByAddressAndOpeningTime?address=456 Broad Ave, Townsville, AnotherState, 54321&openingTime=08:00",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"shop",
						"findByAddressAndOpeningTime"
					],
					"query": [
						{
							"key": "address",
							"value": "456 Broad Ave, Townsville, AnotherState, 54321"
						},
						{
							"key": "openingTime",
							"value": "08:00"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getShopsByAddressAndRevenue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'All Shops' heading\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>All Shops</h2>\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/shop/findByAddressAndRevenue?address_ar=456 Broad Ave, Townsville, AnotherState, 22890&revenue=1000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"shop",
						"findByAddressAndRevenue"
					],
					"query": [
						{
							"key": "address_ar",
							"value": "456 Broad Ave, Townsville, AnotherState, 22890"
						},
						{
							"key": "revenue",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getShopsByRevenue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'All Shops' heading\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>All Shops</h2>\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/shop/findByRevenue?min_revenue=100&max_revenue=555555",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"shop",
						"findByRevenue"
					],
					"query": [
						{
							"key": "min_revenue",
							"value": "100"
						},
						{
							"key": "max_revenue",
							"value": "555555"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getShopsByTwoAddresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'All Shops' heading\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>All Shops</h2>\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/shop/findByTwoAddresses?address1=456 Broad Ave, Townsville, AnotherState, 22891&address2=456 Broad Ave, Townsville, AnotherState, 22890",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"shop",
						"findByTwoAddresses"
					],
					"query": [
						{
							"key": "address1",
							"value": "456 Broad Ave, Townsville, AnotherState, 22891"
						},
						{
							"key": "address2",
							"value": "456 Broad Ave, Townsville, AnotherState, 22890"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getAddShopPage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Add Shop' heading\", function () {\r",
							"     pm.expect(pm.response.text()).to.include(\"<h2>Add Shop</h2>\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains form for adding shop\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('<form action=\"/shop/add\" method=\"post\">');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/shop/add"
			},
			"response": []
		},
		{
			"name": "addShop",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Shop added'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('Shop added');\r",
							"\r",
							"    let pattern = /\\/shop\\/edit\\/(\\d+)/g;\r",
							"    let matches = [];\r",
							"    let match;\r",
							"    while ((match = pattern.exec(responseBody)) !== null) {\r",
							"        matches.push(match[1]);\r",
							"    }\r",
							"    let lastMatch = matches.length > 0 ? matches[matches.length - 1] : null;\r",
							"    pm.collectionVariables.set(\"shopId\", lastMatch)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name\n",
							"value": "Zabka",
							"type": "text"
						},
						{
							"key": "address",
							"value": "456 Broad Ave, Townsville, AnotherState, 88888",
							"type": "text"
						},
						{
							"key": "revenue",
							"value": "20000",
							"type": "text"
						},
						{
							"key": "openingTime",
							"value": "09:00",
							"type": "text"
						},
						{
							"key": "closingTime",
							"value": "21:00",
							"type": "text"
						}
					]
				},
				"url": "http://localhost:8080/shop/add"
			},
			"response": []
		},
		{
			"name": "getShopById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Shop Details' heading\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>Shop Details</h2>\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/shop/{{shopId}}"
			},
			"response": []
		},
		{
			"name": "getEditShopPage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Edit Shop' heading\", function () {\r",
							"     pm.expect(pm.response.text()).to.include(\"<h2>Edit Shop</h2>\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains form for editing shop\", function () {\r",
							"    const matches = pm.response.text().match(/<form action=\"\\/shop\\/edit\\/([a-f0-9-]+)/);\r",
							"    pm.expect(pm.response.text()).to.include(matches[0]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/shop/edit/{{shopId}}"
			},
			"response": []
		},
		{
			"name": "editShop",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Shop updated'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('Shop updated');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "UpdatedZabka",
							"type": "text"
						},
						{
							"key": "address",
							"value": "456 Broad Ave, Townsville, AnotherState, 88888",
							"type": "text"
						},
						{
							"key": "revenue",
							"value": "20000",
							"type": "text"
						},
						{
							"key": "openingTime",
							"value": "09:00",
							"type": "text"
						},
						{
							"key": "closingTime",
							"value": "21:00",
							"type": "text"
						},
						{
							"key": "id",
							"value": "{{shopId}}",
							"type": "text"
						}
					]
				},
				"url": "http://localhost:8080/shop/edit/{{shopId}}"
			},
			"response": []
		},
		{
			"name": "addFood",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Food added'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('Food added');\r",
							"\r",
							"    let pattern = /\\/food\\/edit\\/(\\d+)/g;\r",
							"    let matches = [];\r",
							"    let match;\r",
							"    while ((match = pattern.exec(responseBody)) !== null) {\r",
							"        matches.push(match[1]);\r",
							"    }\r",
							"    let lastMatch = matches.length > 0 ? matches[matches.length - 1] : null;\r",
							"    pm.collectionVariables.set(\"foodId\", lastMatch)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name\n",
							"value": "addedFood",
							"type": "text"
						},
						{
							"key": "calories",
							"value": "90",
							"type": "text"
						},
						{
							"key": "isVegetarian",
							"value": "true",
							"type": "text"
						},
						{
							"key": "expirationDate",
							"value": "2025-12-01",
							"type": "text"
						}
					]
				},
				"url": "http://localhost:8080/food/add"
			},
			"response": []
		},
		{
			"name": "getAddFoodToShopPage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Available Food' heading\", function () {\r",
							"     pm.expect(pm.response.text()).to.include(\"<h2>Available Food</h2>\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/shop/addFood/{{shopId}}"
			},
			"response": []
		},
		{
			"name": "addFoodToShop",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Shop Details' heading\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>Shop Details</h2>\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has 'Food added'\", function () {\r",
							"    const foodId = pm.collectionVariables.get(\"foodId\")\r",
							"    pm.expect(pm.response.text()).to.include(`Food with ID ${foodId} added.`);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": "http://localhost:8080/shop/addFood/{{shopId}}/{{foodId}}"
			},
			"response": []
		},
		{
			"name": "removeFoodFromShop",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Shop Details' heading\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>Shop Details</h2>\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has 'Food removed'\", function () {\r",
							"    const foodId = pm.collectionVariables.get(\"foodId\")\r",
							"    pm.expect(pm.response.text()).to.include(`Food with ID ${foodId} removed.`);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/shop/removeFood/{{shopId}}/{{foodId}}"
			},
			"response": []
		},
		{
			"name": "deleteFood",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Food deleted'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('Food deleted');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/food/delete/{{foodId}}"
			},
			"response": []
		},
		{
			"name": "deleteShop",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Shop deleted'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('Shop deleted');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/shop/delete/{{shopId}}"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "shopId",
			"value": ""
		},
		{
			"key": "foodId",
			"value": ""
		}
	]
}