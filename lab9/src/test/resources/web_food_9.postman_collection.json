{
	"info": {
		"_postman_id": "022873a6-08a1-4b16-b8c3-2ef177e9bebc",
		"name": "web_food_9",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "14174149"
	},
	"item": [
		{
			"name": "getAllFood",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'All Food' heading\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>All Food</h2>\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/food/"
			},
			"response": []
		},
		{
			"name": "getFindFoodPage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains nessesary headers\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>Search Fresh Vegetarian Food </h2>\");\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>Search Non-Vegetarian Food by Calories</h2>\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/food/findFood"
			},
			"response": []
		},
		{
			"name": "getFoodFvg",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'All Food' heading\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>All Food</h2>\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/food/fvg"
			},
			"response": []
		},
		{
			"name": "getFoodNvfwc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'All Food' heading\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>All Food</h2>\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/food/nvfwc?calories=60",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"food",
						"nvfwc"
					],
					"query": [
						{
							"key": "calories",
							"value": "60"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getAddFoodPage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Add Food' heading\", function () {\r",
							"     pm.expect(pm.response.text()).to.include(\"<h2>Add Food</h2>\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains form for adding food\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('<form action=\"/food/add\" method=\"post\">');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/food/add"
			},
			"response": []
		},
		{
			"name": "addFood",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Food added'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('Food added');\r",
							"\r",
							"    let pattern = /\\/food\\/edit\\/(\\d+)/g;\r",
							"    let matches = [];\r",
							"    let match;\r",
							"    while ((match = pattern.exec(responseBody)) !== null) {\r",
							"        matches.push(match[1]);\r",
							"    }\r",
							"    let lastMatch = matches.length > 0 ? matches[matches.length - 1] : null;\r",
							"    \r",
							"    pm.collectionVariables.set(\"foodId\", lastMatch)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name\n",
							"value": "addedFood",
							"type": "text"
						},
						{
							"key": "calories",
							"value": "90",
							"type": "text"
						},
						{
							"key": "isVegetarian",
							"value": "true",
							"type": "text"
						},
						{
							"key": "expirationDate",
							"value": "2025-12-01",
							"type": "text"
						}
					]
				},
				"url": "http://localhost:8080/food/add"
			},
			"response": []
		},
		{
			"name": "getFoodById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Food Details' heading\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"<h2>Food Details</h2>\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/food/{{foodId}}"
			},
			"response": []
		},
		{
			"name": "getEditFoodPage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Edit food' heading\", function () {\r",
							"     pm.expect(pm.response.text()).to.include(\"<h2>Edit Food</h2>\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains form for editing food\", function () {\r",
							"    const matches = pm.response.text().match(/<form action=\"\\/food\\/edit\\/([a-f0-9-]+)/);\r",
							"    pm.expect(pm.response.text()).to.include(matches[0]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/food/edit/{{foodId}}"
			},
			"response": []
		},
		{
			"name": "editFood",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Food updated'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('Food updated');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "updatedBread",
							"type": "text"
						},
						{
							"key": "calories",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "isVegetarian",
							"value": "false",
							"type": "text"
						},
						{
							"key": "expirationDate",
							"value": "2025-12-01",
							"type": "text"
						},
						{
							"key": "id",
							"value": "{{foodId}}",
							"type": "text"
						}
					]
				},
				"url": "http://localhost:8080/food/edit/{{foodId}}"
			},
			"response": []
		},
		{
			"name": "deleteFood",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Food deleted'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('Food deleted');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/food/delete/{{foodId}}"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "foodId",
			"value": ""
		}
	]
}