{
	"info": {
		"_postman_id": "33b89a45-073c-4c29-a427-d05ae0bb3f3f",
		"name": "api",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "14174149"
	},
	"item": [
		{
			"name": "getAllFood",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test response is an array\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.response.to.have.jsonBody(pm => {\r",
							"        pm.expect(pm).to.be.an('array');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/api/food"
			},
			"response": []
		},
		{
			"name": "addFood",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test status code\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Test response header has Location\r",
							"pm.test(\"Response header has Location\", function () {\r",
							"    pm.response.to.have.header(\"Location\");\r",
							"});\r",
							"\r",
							"// Test response has expected properties\r",
							"pm.test(\"Response has expected properties\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.have.property('id');\r",
							"    pm.expect(responseJson).to.have.property('name');\r",
							"    pm.expect(responseJson).to.have.property('calories');\r",
							"    pm.expect(responseJson).to.have.property('isVegetarian');\r",
							"    pm.expect(responseJson).to.have.property('expirationDate');\r",
							"\r",
							"    pm.collectionVariables.set(\"foodId\", responseJson.id);\r",
							"\r",
							"    //console.log(pm.variables.get(\"foodId\"));\r",
							"    //pm.environment.set(\"foodId\", responseJson.id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"addedFood\",\r\n    \"calories\": 90,\r\n    \"isVegetarian\": \"true\",\r\n    \"expirationDate\": \"2024-12-01\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/api/food"
			},
			"response": []
		},
		{
			"name": "getById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test status code\r",
							"//const foodId = pm.collectionVariables.get(\"foodId\");\r",
							"//pm.request.url = pm.request.url.replace(\"{id}\", foodId);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test response has expected properties\r",
							"pm.test(\"Response has expected properties\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.property('id');\r",
							"    pm.expect(responseJson).to.have.property('name');\r",
							"    pm.expect(responseJson).to.have.property('calories');\r",
							"    pm.expect(responseJson).to.have.property('isVegetarian');\r",
							"    pm.expect(responseJson).to.have.property('expirationDate');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/api/food/{{foodId}}"
			},
			"response": []
		},
		{
			"name": "editFood",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test status code\r",
							"//const foodId = pm.collectionVariables.get(\"foodId\");\r",
							"//pm.request.url = pm.request.url.replace(\"{id}\", foodId);\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test response has expected properties\r",
							"pm.test(\"Response has expected properties\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.property('id');\r",
							"    pm.expect(responseJson).to.have.property('name');\r",
							"    pm.expect(responseJson).to.have.property('calories');\r",
							"    pm.expect(responseJson).to.have.property('isVegetarian');\r",
							"    pm.expect(responseJson).to.have.property('expirationDate');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{foodId}},\r\n    \"name\": \"updatedFood\",\r\n    \"calories\": 90,\r\n    \"isVegetarian\": \"true\",\r\n    \"expirationDate\": \"2024-12-01\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/api/food/{{foodId}}"
			},
			"response": []
		},
		{
			"name": "deleteFood",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test status code\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"//Test response body\r",
							"pm.test(\"Response body is empty\", function () {\r",
							"    pm.response.to.not.have.body();\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "http://localhost:8080/api/food/{{foodId}}"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "foodId",
			"value": "\"\""
		},
		{
			"key": "foodId",
			"value": ""
		}
	]
}